# Source
https://www.mostlypython.com/django-from-first-principles/

# Go to project folfer
cd .\DjangoFromSingleFIleProject

# Create virtual environment
python -m venv .venv

# Activate/Start virtual environment
.venv\Scripts\activate

# Deactivate virtual environment
deactivate

# Install django on virtual environment
pip install Django

# Create single-file
cd . > blogmaker_lite.py

    # Add next text to the file and save it
    from django.conf import settings
    from django.http import HttpResponse
    from django.urls import path
    from django.core.handlers.wsgi import WSGIHandler
    from django.core.management import \
        execute_from_command_line

    settings.configure(
        ROOT_URLCONF=__name__,
        DEBUG=True,
        SECRET_KEY="my-secret-key",
    )

    def index(request):
        return HttpResponse("BlogMaker Lite")

    urlpatterns = [
        path("", index)
    ]

    application = WSGIHandler()

    if __name__ == "__main__":
        execute_from_command_line()

# Run the project
python manage.py runserver

# Generates a migration file for a specific app in your project
python manage.py makemigrations blogs

# Migrate the migration file to the database
python manage.py migrate

# Create a superuser for Django project
python manage.py createsuperuser
victor / Adm1n2008.

# Terminal-based way to explore your data
python manage.py shell

# If "STATIC_ROOT" variable is set, runnig this command in Django will copy all custom static files from folders in "STATICFILES_DIRS" variable to "staticfiles/" folder
# When "staticfiles/" folder does not exist yet, Django create it. In addition it creates a folder called "admin" and subfolders for css, img and js by default
# NOTE: You shouldn't store any of your own static files in the directory that matches your STATIC_ROOT setting. If you do, Django will dump a bunch of other static files into that same directory, and things will get quite confusing.
python manage.py collectstatic

# Delete all data from database without affecting the structure of the database
python manage.py flush

Process for building a page in a standard Django project: define a URL pattern for the page, write a view, and write a template.


